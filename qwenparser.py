import logging
import re

# –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞)
logging.basicConfig(level=logging.INFO)

def parse_order(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É –º–µ—Ç–∫–∞–º–∏ [ORDER_START] –∏ [ORDER_END]"""
    logging.info("üîç –ó–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–µ—Ä –∑–∞–∫–∞–∑–æ–≤...")

   # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
    pattern = re.compile( 
        r"\[ORDER_START\](?:\s|&nbsp;)*((?:(?!\[ORDER_END\])[\s\S])*)\[ORDER_END\]",                 
        re.DOTALL | re.IGNORECASE
    )
    match = pattern.search(text)

    if not match:
        logging.warning("‚ùå –ë–ª–æ–∫ [ORDER_START]...[ORDER_END] –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏.")
        return None

    order_block = match.group(1).strip()
    logging.info(f"üì¶ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –∑–∞–∫–∞–∑–∞:\n{order_block}")

    order_data = {}

    # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for line in order_block.split('\n'):
        line = line.strip()
        if ':' in line:
            key, value = line.split(':', 1)
            order_data[key.strip()] = value.strip()
            logging.debug(f"üìå –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª–µ: {key} ‚Üí {value}")
        else:
            logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ): {line}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ['–ò–º—è', '–ê–¥—Ä–µ—Å', '–¢–æ–≤–∞—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
    missing = [field for field in required_fields if field not in order_data]

    if missing:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing}")
        return None

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    # try:
    #     quantity = int(order_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
    #     if quantity <= 0:
    #         raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    #     order_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = quantity
    #     logging.info("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ.")
    # except ValueError as e:
    #     logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
    #     return None

    logging.info(f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {order_data}")
    return order_data
